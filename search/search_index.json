{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"naturalcolors","text":"<p>naturalcolors generates custom colormaps from a list of RGB(A) colors.</p>"},{"location":"#installation","title":"Installation","text":"<p>There are different options how to install naturalcolors. </p>"},{"location":"#pypi","title":"PyPI","text":"<p>You can install the latest release with pip</p> <pre><code>pip install naturalcolors\n</code></pre>"},{"location":"#install-from-source","title":"Install from source","text":"<p>You may also get the latest development version directly from Github</p> <pre><code>pip install git+https://github.com/fdsteffen/naturalcolors.git\n</code></pre>"},{"location":"#getting-started","title":"Getting started","text":"<p>A guide to create your own colormap can be found in this Tutorial.</p>"},{"location":"api/","title":"API","text":"<p>Make a custom colormap from a list of colors</p> References <p>[1] https://matplotlib.org/stable/users/explain/colors/colormap-manipulation.html</p>"},{"location":"api/#naturalcolors.colorpalette.drawColorBar","title":"drawColorBar","text":"<pre><code>drawColorBar(cmap: Union[mpl.colors.ListedColormap, mpl.colors.LinearSegmentedColormap, str]) -&gt; mpl.figure.Figure\n</code></pre> <p>Draw a colorbar from the colormap</p> <p>Parameters:</p> Name Type Description Default <code>cmap</code> <p>A Listed colormap, a linear segmented colormap or the name of a registered colormap</p> required <p>Returns:</p> Type Description <code>Figure</code> <p>A matplotlib Figure object</p>"},{"location":"api/#naturalcolors.colorpalette.drawColorCircle","title":"drawColorCircle","text":"<pre><code>drawColorCircle(cmap: Union[mpl.colors.ListedColormap, mpl.colors.LinearSegmentedColormap, str], n: int = 24, area: int = 200) -&gt; mpl.axes.Axes\n</code></pre> <p>Draw a color circle from the colormap</p> <p>Parameters:</p> Name Type Description Default <code>cmap</code> <p>A Listed colormap, a linear segmented colormap or the name of a registered colormap</p> required <code>n</code> <p>Number of colors to display in the color circle (set n=256 for a continuous circle)</p> <code>24</code> <code>area</code> <p>Size of the circles to draw</p> <code>200</code> <p>Returns:</p> Type Description <code>Axes</code> <p>A matplotlib Axes object</p>"},{"location":"api/#naturalcolors.colorpalette.get_cmap","title":"get_cmap","text":"<pre><code>get_cmap(name: Optional[str] = None, colormap_filename: str = DEFAULT_COLORMAP) -&gt; dict[str, tuple[mpl.colors.ListedColormap, mpl.colors.LinearSegmentedColormap, str]]\n</code></pre> <p>Return the selected LinearSegmentedColormap or a dictionary of all colormaps registered in colormap_filename</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <p>Name of the colormap</p> <code>None</code> <code>colormap_filename</code> <p>Path to a JSON file encoding a dictionary of colors which define custom colormaps</p> <code>DEFAULT_COLORMAP</code> <p>Returns:</p> Type Description <code>dict[str, tuple[ListedColormap, LinearSegmentedColormap, str]]</code> <p>A dictionary of colormap names and the corresponding listed and linear segmented colormaps</p>"},{"location":"api/#naturalcolors.colorpalette.get_colors","title":"get_colors","text":"<pre><code>get_colors(cmap: Union[mpl.colors.ListedColormap, mpl.colors.LinearSegmentedColormap, str], n: int, scramble: bool = False) -&gt; np.ndarray\n</code></pre> <p>Extract n colors from a colormap</p> <p>Parameters:</p> Name Type Description Default <code>cmap</code> <p>A Listed colormap, a linear segmented colormap or the name of a registered colormap</p> required <code>n</code> <p>Number of colors to extract from the colormap</p> required <code>scramble</code> <code>bool</code> <p>Whether to scramble the color</p> <code>False</code> <p>Returns:</p> Type Description <code>ndarray</code> <p>A numpy array of colors</p>"},{"location":"api/#naturalcolors.colorpalette.list_cmaps","title":"list_cmaps","text":"<pre><code>list_cmaps() -&gt; list[str]\n</code></pre> <p>List all available colormaps</p> <p>Returns:</p> Type Description <code>list[str]</code> <p>A list of colormap names</p>"},{"location":"api/#naturalcolors.colorpalette.load_colors","title":"load_colors","text":"<pre><code>load_colors(filename: str = DEFAULT_COLORMAP)\n</code></pre> <p>Load rgba colors from a json file</p> <p>Parameters:</p> Name Type Description Default <code>filename</code> <p>JSON filename of user defined colormaps (defaults to the in-build colormaps of the package)</p> <code>DEFAULT_COLORMAP</code>"},{"location":"api/#naturalcolors.colorpalette.make_colormap","title":"make_colormap","text":"<pre><code>make_colormap(colors: np.ndarray, name: str = 'newcolormap') -&gt; tuple[mpl.colors.ListedColormap, mpl.colors.LinearSegmentedColormap, str]\n</code></pre> <p>Build a listed and a linear segmented colormap from a list of colors</p> <p>Parameters:</p> Name Type Description Default <code>colors</code> <p>A numpy array of RGB colors</p> required <code>name</code> <p>The name of the new colormap</p> <code>'newcolormap'</code> <p>Returns:</p> Type Description <code>tuple[ListedColormap, LinearSegmentedColormap, str]</code> <p>A matplotlib LinearSegmented or Listed colormap</p>"},{"location":"api/#naturalcolors.colorpalette.naturalcolors","title":"naturalcolors","text":"<pre><code>naturalcolors() -&gt; tuple[mpl.colors.ListedColormap, mpl.colors.LinearSegmentedColormap, str]\n</code></pre> <p>Wrapper for naturalcolors map</p> <p>Returns:</p> Type Description <code>tuple[ListedColormap, LinearSegmentedColormap, str]</code> <p>A listed and linear segmented colormaps</p>"},{"location":"api/#naturalcolors.colorpalette.set_ticksStyle","title":"set_ticksStyle","text":"<pre><code>set_ticksStyle(x_size: float = 4, y_size: float = 4, x_dir: str = 'in', y_dir: str = 'in')\n</code></pre> <p>Ticks settings for plotting</p> <p>Parameters:</p> Name Type Description Default <code>x_size</code> <p>length of x-ticks</p> <code>4</code> <code>y_size</code> <p>length of y-ticks</p> <code>4</code> <code>x_dir</code> <p>inward or outward facing x-ticks (\"in\" or \"out\")</p> <code>'in'</code> <code>y_dir</code> <p>inward or outward facing y-ticks (\"in\" or \"out\")</p> <code>'in'</code>"},{"location":"naturalcolors_tutorial/","title":"Naturalcolors tutorial","text":"In\u00a0[1]: Copied! <pre>import numpy as np\nimport importlib\nimport matplotlib as mpl\nimport naturalcolors.colorpalette as ncp\n</pre> import numpy as np import importlib import matplotlib as mpl import naturalcolors.colorpalette as ncp In\u00a0[3]: Copied! <pre>natcmap_list,natcmap_linseg = ncp.naturalcolors()\n</pre> natcmap_list,natcmap_linseg = ncp.naturalcolors() <p>The resulting listed and linear segmented colormaps can be visualized either by a colorbar or a color circle</p> In\u00a0[13]: Copied! <pre>ncp.drawColorBar(natcmap_linseg)\n</pre> ncp.drawColorBar(natcmap_linseg) <p>Draw a color circle with the naturalcolors colormap</p> In\u00a0[14]: Copied! <pre>ncp.drawColorCircle(natcmap_linseg, 15, 2000)\n</pre> ncp.drawColorCircle(natcmap_linseg, 15, 2000) In\u00a0[20]: Copied! <pre>colors = [[0.31, 0.45, 0.56],[0.9,0.9,0.9], [0.75, 0.51, 0.38]]\ncmap_list,cmap_linseg = ncp.make_colormap(colors, 'BlueWhiteOrange')\nncp.drawColorCircle(cmap_linseg, area=500)\n</pre> colors = [[0.31, 0.45, 0.56],[0.9,0.9,0.9], [0.75, 0.51, 0.38]] cmap_list,cmap_linseg = ncp.make_colormap(colors, 'BlueWhiteOrange') ncp.drawColorCircle(cmap_linseg, area=500) In\u00a0[21]: Copied! <pre>ncp.drawColorCircle('Blues', area=500)\n</pre> ncp.drawColorCircle('Blues', area=500) <p>A registered colormap can be accessed from its name by the following equivalent commands:</p> In\u00a0[28]: Copied! <pre># from the cmap submodule\nmpl.cm.get_cmap('Blues')\n\n# from the pyplot submodule\nmpl.pyplot.get_cmap('Blues')\n</pre> # from the cmap submodule mpl.cm.get_cmap('Blues')  # from the pyplot submodule mpl.pyplot.get_cmap('Blues') Out[28]: <pre>&lt;matplotlib.colors.LinearSegmentedColormap at 0x7f53bc975278&gt;</pre> <p>A list of n colors can be extracted from a colormap using the <code>get_colors</code> function of the colorpalette submodule (calls <code>cmap(np.linspace(0,1,n)</code> internally). Using the flag <code>scramble=True</code> (default=False) rearranges the color array as <code>[[first rgb],[last rgb],[second rgb],...]]</code></p> In\u00a0[44]: Copied! <pre>ncp.get_colors('Blues', 5, scramble=True)\n</pre> ncp.get_colors('Blues', 5, scramble=True) Out[44]: <pre>array([[0.96862745, 0.98431373, 1.        , 1.        ],\n       [0.03137255, 0.18823529, 0.41960784, 1.        ],\n       [0.77524029, 0.85830065, 0.9368243 , 1.        ],\n       [0.12710496, 0.44018454, 0.70749712, 1.        ],\n       [0.41708574, 0.68063053, 0.83823145, 1.        ]])</pre>"},{"location":"naturalcolors_tutorial/#naturalcolors-tutorial","title":"Naturalcolors tutorial\u00b6","text":""},{"location":"naturalcolors_tutorial/#documentation","title":"Documentation\u00b6","text":"<p>Documentation on how to create a colormap from a list of colors (a listed colormap) or by specifying anchor points between which the RGB(A) colors are interpolated (a linear segmented colormap) can be found here:</p> <p>https://matplotlib.org/3.1.0/tutorials/colors/colormap-manipulation.html</p>"},{"location":"naturalcolors_tutorial/#the-naturalcolors-colormap","title":"The naturalcolors  colormap\u00b6","text":"<p>Naturalcolors provides wrapper functions to create a colormap from a list of colors in a json file. The colormap is generated by calling the <code>naturalcolors()</code> function from the <code>colorpalette</code> submodule.</p>"},{"location":"naturalcolors_tutorial/#custom-colormaps","title":"Custom colormaps\u00b6","text":"<p>You can create your own custom colormaps directly from a list of colors or by loading them from a json file using the <code>load_colors</code> function from the colorpalette submodule.</p> <p>The json file should be structures as a list of rgb(a) colors:</p> <pre><code>[[234,33,59],\n[237,65,55],\n[239,102,58],\n...]\n</code></pre>"},{"location":"naturalcolors_tutorial/#registered-colormaps","title":"Registered colormaps\u00b6","text":"<p>Registered colormaps can also be called directly from their name</p>"}]}